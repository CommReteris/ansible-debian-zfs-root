---
- hosts: external

  vars:
    ansible_user: root
    ansible_connection: chroot
    ansible_python_interpreter: /usr/bin/python3

  tasks:
    - name: Mount /boot/efi
      mount:
        fstype: vfat
        opts: x-systemd.idle-timeout=1min,x-systemd.automount,noauto
        passno: "1"
        path: /boot/efi
        src: UUID={{ ansible_devices[root_disk].partitions[root_disk + 'p1'].uuid }}
        state: mounted

    - name: Set the hostname
      copy:
        dest: /etc/hostname
        content: "{{ fqdn.split('.')[0] }}"
        mode: 0o644

    - name: Set the hostname and fqdn in etc/hosts
      lineinfile:
        path: /etc/hosts
        regexp: '^127.0.1.1'
        insertafter: '^127.0.0.1'
        line: 127.0.1.1 {{ fqdn }} {{ fqdn.split(".")[0] }}

    - name: Create the network config file
      template:
        src: network.j2
        dest: /etc/systemd/network/lan0.network
        mode: 0o644

    - name: Enable systemd-networkd
      systemd:
        service: systemd-networkd
        enabled: true

    - name: Install python3 apt
      apt:
        name:
          - python3-apt
        state: present
        install_recommends: false

    - name: Remove default apt lists
      file:
        name: /etc/apt/sources.list
        state: absent
      become: true

    - name: Enable contrib and non-free repositories
      apt_repository:
        repo: deb http://deb.debian.org/debian {{ ansible_distribution_release }} main contrib non-free
        filename: debian
        state: present
      become: true

    - name: Enable backports
      apt_repository:
        repo: deb http://deb.debian.org/debian {{ ansible_distribution_release }}-backports main contrib non-free
        filename: debian
        state: present
      become: true

    - name: Set zfs apt preferences
      copy:
        dest: "/etc/apt/preferences.d/90_zfs"
        content: |
          Package: libnvpair1linux libuutil1linux libzfs2linux libzpool2linux spl-dkms zfs-dkms zfs-test zfsutils-linux zfsutils-linux-dev zfs-zed
          Pin: release n=buster-backports
          Pin-Priority: 990
        mode: "0644"
      become: true

    - name: Set python3 apt preferences
      copy:
        dest: "/etc/apt/preferences.d/85_python"
        content: |
          Package: python3
          Pin: release n=buster-backports
          Pin-Priority: 990
        mode: "0644"
      become: true

    - name: Ensure all packages are up to date
      apt:
        upgrade: full
        force_apt_get: false
        autoclean: true
        autoremove: true
        update_cache: true
      become: true

    - name: Install kernel drivers utilities
      apt:
        name:
          - dkms
          - openssl
        state: present
        install_recommends: false

    - name: Sign kernel modules on install
      lineinfile:
        path: /etc/dkms/framework.conf
        regexp: '^#\s(sign_tool.*)'
        line: '\1'
        backrefs: true
        state: present

    - name: Ensure ZFS update rebuilds all initramfs
      copy:
        dest: /etc/dkms/zfs.conf
        content: REMAKE_INITRD=yes
        mode: 0o644
      become: true

    - name: Create key to sign kernel modules
      command: |
        openssl \
          req \
          -nodes \
          -new -x509 -newkey rsa:2048 \
          -keyout /root/mok.priv \
          -outform DER -out /root/mok.der \
          -days 36500 \
          -subj "/CN={{ fqdn }} module signing key/"
      args:
        creates: /root/mok.priv

    - name: Install required packages
      apt:
        name:
          - console-setup
          - linux-image-amd64
          - linux-headers-amd64
          - locales
          - openssh-server
          - sudo
          - zfs-initramfs
          - zfs-zed
          - grub-efi-amd64
          - grub-efi-amd64-signed
          - shim-signed
          - openssh-server
        install_recommends: false

    - name: Ensure the requested locale exists
      locale_gen:
        name: "{{ item }}"
        state: present
      loop:
        - en_US.UTF-8
        - en_GB.UTF-8

    - name: Set default locale to en_GB.UTF-8
      debconf:
        name: locales
        question: locales/default_environment_locale
        value: en_GB.UTF-8
        vtype: select

    - name: Configure locales to generate
      debconf:
        name: locales
        question: locales/locales_to_be_generated
        value: en_US.UTF-8 en_GB.UTF-8 UTF-8
        vtype: multiselect

    - name: Set timezone area
      debconf:
        name: tzdata
        question: tzdata/Areas
        value: Europe
        vtype: select

    - name: Set timezone city
      debconf:
        name: tzdata
        question: tzdata/Zones/Europe
        value: London
        vtype: select

    - name: Set timezone UTC
      debconf:
        name: tzdata
        question: tzdata/Zones/Etc
        value: UTC
        vtype: select

    - name: Set keyboard
      debconf:
        name: keyboard-configuration
        question: keyboard-configuration/variant
        value: English (US)
        vtype: select

    - name: Create the admin user
      user:
        name: "{{ admin_username }}"
        password: "{{ admin_password }}"
        create_home: true
        shell: /bin/bash
        groups:
          - sudo

    - name: Set authorized key taken for the admin user
      authorized_key:
        user: "{{ admin_username }}"
        state: present
        key: "{{ admin_public_key }}"

    - name: Enable zfs-import-scan
      systemd:
        name: zfs-import-scan
        enabled: true

    - name: Mask zfs-import-cache
      systemd:
        name: zfs-import-cache
        masked: true

    - name: Ensure the ZFS cache file doesn't exist
      file:
        path: /etc/zfs/zpool.cache
        state: absent

    - name: Create the zfs-import-scan service override directory
      file:
        path: /etc/systemd/system/zfs-import-scan.service.d
        state: directory
        owner: root
        group: root
        mode: 0o755

    - name: Override the zfs-import-scan service to not check for zpool.cache
      copy:
        content: |
          [Unit]
          ConditionPathExists=
        dest: /etc/systemd/system/zfs-import-scan.service.d/run-even-if-cache-exists.conf
        owner: root
        group: root
        mode: 0o644

    - name: Ensure we have /tmp on a tmpfs
      file:
        src: /usr/share/systemd/tmp.mount
        dest: /etc/systemd/system/tmp.mount
        state: link
        mode: 0o644

    - name: Enable the /tmp tmpfs mount service
      systemd:
        service: tmp.mount
        enabled: true

    - name: Enable openssh server
      systemd:
        service: ssh.service
        enabled: true

    - name: Update the initramfs
      command: update-initramfs -c -k all

    - name: Tell grub where the root is
      lineinfile:
        path: /etc/default/grub
        regexp: '^GRUB_CMDLINE_LINUX='
        line: 'GRUB_CMDLINE_LINUX="root=ZFS=rpool/ROOT/{{ zfs_system_root_name }} verbose intel_iommu=on iommu=pt rd.driver.blacklist=nouveau rd.module.blacklist=nouveau"'

    - name: Update grub configuration files
      command: update-grub

    - name: Install grub
      command: >
        grub-install \
        --target=x86_64-efi \
        --efi-directory=/boot/efi \
        --bootloader-id=debian \
        --recheck \
        --no-floppy

    - name: Snapshot the filesystems before boot
      zfs:
        name: "{{ item }}@install"
        state: present
      loop:
        - rpool/ROOT/{{ zfs_system_root_name }}
        - bpool/BOOT/{{ zfs_system_root_name }}
        - rpool/var
